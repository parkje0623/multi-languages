.into_iter()
 - Moves self (not a reference, arguments are values)
 - Returns each value moved out of the vector (iterator created from a value, returns iterator itself)
 - Different types of values produced depending on the Type T of Vec<T>
 - Because for loop works on anything that implements IntoIterator, .into_iter() is mostly called implicity when we use for loops.

.iter()
 - Borrows reference &self
 - Returns an iterator over the slice
 - Different types of values produced depending on the Type &T of Vec<&T>
 - Brief sentence describing why its necessary
 - Primarily iterating throught a collection using for loop. 
   Because the argument takes the reference (not the actual value), when called by other functions or methods, ownership stays with the main code (useful).
	(Values of the Vec reference can be used in a function and method without moving the ownership to the function)

.iter_mut()
 - Mutably borrow reference &mut self
 - Returns an iterator that allows modifying each value
 - Different types of values produced depending on the Type &mut T of Vec<&mut T>
 - Primarily iterating throught a collection using for loop. 
   Because the argument takes the mutable reference (not the actual value), the Vec can be modified and return to main code with modified Vector.
	Useful when Vec needs to be modified in the function/method

.drain(...)
 - Mutably borrow reference &mut self
 - Returns the draining iterator that removes full range of vectors (all elements in vector removed)
 - Empty set of Vector (i.e., if v.drain(..) {produce empty vector []})
 - When .drain(..) is sued, Vec becomes empty, but the storage previously allocated in Vec remains allocated.
	Very useful because programmers may insert new elements in the drained Vector without having to allocate storage until its capacity is reached.